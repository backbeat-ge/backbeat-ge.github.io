---
import { getEntry } from "astro:content";
import tinycolor from "tinycolor2";
import PlaceBox from "../../components/common/PlaceBox.astro";
import RegistrationButton from "../../components/common/RegistrationButton.astro";
import SaveTheDateBox from "../../components/common/SaveTheDateBox.astro";
import WorkshopDecoBottom from "../../components/workshops/WorkshopDecoBottom.astro";
import WorkshopDecoTop from "../../components/workshops/WorkshopDecoTop.astro";
import { useTranslations } from "../../i18n/utils";
import Layout from "../Layout.astro";

const {
  frontmatter: {
    title,
    frontColor,
    fromDate,
    imageSrc,
    registrationUrl,
    placeList,
  },
} = Astro.props;

const resolvedPlaceList = placeList
  ? await Promise.all(
      placeList.map(async ({ place }: { place: any }) => {
        // Extract slug from Tina's full path
        const slug = place.split("/").pop().replace(".json", "");
        // Get the entry using the slug
        const placeEntry = await getEntry("places", slug);
        return {
          place: placeEntry.data,
        };
      }),
    )
  : null;

const lang = Astro.currentLocale as "fr" | "en";
const t = useTranslations(lang);

const borderColor = tinycolor(frontColor).darken(5).toString();
const pageColor = tinycolor(frontColor).lighten(30).toString();
---

<Layout title={title} class="bg-pink-400">
  <WorkshopDecoTop />

  <div
    class="flex flex-wrap max-w-screen-lg m-auto m-12 border-8"
    style={`background-color: ${pageColor}; border-color: ${borderColor};`}
  >
    <div style={`background-color: ${borderColor}`} class="w-full">
      <h1 class="text-2xl pb-2 text-center text-white oswald">
        {title}
      </h1>
    </div>
    <div class="flex items-start overflow-hidden w-full md:w-1/2">
      <div class="flex flex-col">
        <img
          src={imageSrc}
          alt={"fr" === lang ? "BanniÃ¨re de l'atelier" : "Workshop banner"}
          class="w-full object-cover"
        />
        {
          resolvedPlaceList && (
            <div class="p-8 w-full md:w-1/2">
              <div class="p-12">
                <div class="max-w-prose mx-auto">
                  <h2 class="text-2xl font-bold mb-6">
                    {resolvedPlaceList.length > 1 ? "Lieux" : "Lieu"}
                  </h2>
                </div>
                <div
                  class={`max-w-prose mx-auto grid grid-cols-1 ${resolvedPlaceList.length > 1 ? "md:grid-cols-2" : ""} gap-6`}
                >
                  {resolvedPlaceList.map(({ place }) => (
                    <PlaceBox place={place} color={frontColor} />
                  ))}
                </div>
              </div>
            </div>
          )
        }
        {
          registrationUrl && (
            <div class="p-12 w-full flex">
              <div class="flex flex-grow justify-center items-center">
                <RegistrationButton
                  registrationUrl={registrationUrl}
                  frontColor={frontColor}
                />
              </div>
            </div>
          )
        }
        {
          new Date(fromDate) > new Date() && !registrationUrl && (
            <div class="p-12 w-full flex">
              <div class="flex flex-grow justify-center items-center">
                <SaveTheDateBox frontColor={frontColor} />
              </div>
            </div>
          )
        }
      </div>
    </div>
    <div class="p-8 w-full md:w-1/2">
      <div
        class="prose max-w-prose mx-auto prose-headers:font-bold
      prose-h1:text-3xl prose-h1:text-center prose-h1:uppercase
      prose-h2:text-2xl prose-h2:font-bold prose-h1:uppercase
      prose-h3:text-xl prose-h2:font-bold prose-h1:uppercase
      prose-p:text-justify
      prose-li:my-0"
      >
        <slot />
      </div>
    </div>
  </div>
  <WorkshopDecoBottom />
</Layout>
