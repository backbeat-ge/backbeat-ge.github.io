---
import { getEntry } from "astro:content";
import tinycolor from "tinycolor2";
import Layout from "./Layout.astro";

const {
  frontmatter: { title, frontColor, imageSrc, registrationUrl, placeList },
} = Astro.props;

const resolvedPlaceList = placeList
  ? await Promise.all(
      placeList.map(async ({ place }) => {
        // Extract slug from Tina's full path
        const slug = place.split("/").pop().replace(".json", "");
        // Get the entry using the slug
        const placeEntry = await getEntry("places", slug);
        return {
          place: placeEntry.data,
        };
      }),
    )
  : null;

const computedBgColor = tinycolor(frontColor).lighten(25).toString();
---

<Layout
  title={`${title} | Backbeat`}
  style={`background-color: ${computedBgColor};`}
>
  <div class="flex flex-col max-w-screen-lg mx-auto bg-stone-100 m-12">
    <div style={`background-color: ${frontColor}`}>
      <h1 class="text-4xl p-4 text-center text-white oswald">
        {title}
      </h1>
    </div>
    <div class="flex flex-col md:flex-row">
      <div class="flex items-start overflow-hidden md:w-1/2">
        <img
          src={imageSrc}
          alt="BanniÃ¨re du cours actuel"
          class="w-full object-cover"
        />
      </div>
      <div class="p-12 md:w-1/2">
        <div
          class="prose max-w-prose mx-auto prose-headers:font-bold
        prose-h1:text-3xl prose-h1:text-center prose-h1:uppercase
        prose-h2:text-2xl prose-h2:font-bold prose-h1:uppercase
        prose-h3:text-xl prose-h2:font-bold prose-h1:uppercase
        prose-p:text-justify
        prose-li:my-0"
        >
          <slot />
        </div>
        {
          resolvedPlaceList && (
            <div class="p-12">
              <div class="max-w-prose mx-auto">
                <h2 class="text-2xl font-bold mb-6">
                  {resolvedPlaceList.length > 1 ? "Lieux" : "Lieu"}
                </h2>
              </div>
              <div
                class={`max-w-prose mx-auto grid grid-cols-1 ${resolvedPlaceList.length > 1 ? "md:grid-cols-2" : ""} gap-6`}
              >
                {resolvedPlaceList.map(({ place }) => (
                  <div class="bg-white p-4 rounded-lg shadow">
                    <h3 class="font-bold text-lg mb-2">{place.name}</h3>
                    <p class="text-gray-600 mb-2">{place.address}</p>
                    {place.comment && (
                      <p class="text-gray-500 text-sm italic">
                        {place.comment}
                      </p>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )
        }
      </div>
    </div>
    <div class="p-12 text-center">
      <a
        style={`background-color: ${frontColor};`}
        class="py-2 px-4 text-white"
        href={registrationUrl}>Je m'inscris!</a
      >
    </div>
  </div>
</Layout>
