---
import { getCollection } from "astro:content";
import { format } from "date-fns";
import tinycolor from "tinycolor2";
import { useTranslations } from "../../i18n/utils";

const lang = Astro.currentLocale as "fr" | "en";
const t = useTranslations(lang);

const allCourses = await getCollection(
  "courses",
  ({ id, data: { published } }) => {
    return id.startsWith(lang) && published;
  },
);

allCourses.sort((a, b) => {
  const dateA = new Date(a.data.fromDate);
  const dateB = new Date(b.data.fromDate);

  return dateB.getTime() - dateA.getTime();
});
---

<div
  class="mx-auto flex w-full max-w-screen-lg flex-grow flex-wrap items-center justify-center gap-6 py-12 px-4"
>
  {
    allCourses.length === 0 ? (
      <p class="text-center text-indigo-800">
        {"en" === lang ? (
          <em>No courses are currently programmed.</em>
        ) : (
          <em>Aucun cours n'est actuellement programmé.</em>
        )}
      </p>
    ) : (
      allCourses.map((course) => {
        const borderColor = tinycolor(course.data.frontColor)
          .darken(5)
          .toString();

        const courseUrl =
          "fr" === lang
            ? `/fr/cours/${course.slug.split("/").slice(1).join("/")}`
            : `/en/courses/${course.slug.split("/").slice(1).join("/")}`;

        return (
          <a
            href={courseUrl}
            class="flex flex-col w-full pb-0 border-8"
            style={`background-color: ${borderColor}; border-color: ${borderColor}`}
          >
            <img
              src={course.data.bannerSrc}
              alt={lang === "en" ? "Course banner" : "Bannière du cours"}
              class="w-full object-cover"
            />
            <div class="flex flex-col md:flex-row flex-wrap text-white">
              <div class="flex flex-col flex-1">
                <span class="text-xl p-2 font-bold">{course.data.title}</span>
                <span class="p-2 pt-0">
                  Du {format(new Date(course.data.fromDate), "dd.MM.yyyy")} au{" "}
                  {format(new Date(course.data.toDate), "dd.MM.yyyy")}
                </span>
              </div>
              <div class="flex items-center justify-end p-2 w-auto">
                {new Date(course.data.fromDate) > new Date() &&
                  !course.data.registrationUrl && (
                    <span class="font-semibold bg-lime-500 rounded-lg p-2">
                      {t("action.save-the-date")}
                    </span>
                  )}
              </div>
            </div>
          </a>
        );
      })
    )
  }
</div>
